1.You cannot instantiate an array whose element type is a type parameter. That is following is invalid.

T a = new T [5];

The reason is that you can't create an array of T is that there is no way for the compiler to know what type of array to actually create.

2. A generic method or any method in a generic class can be declared as static.
class GenericStaticDemo {
    // Defining a static generic method to print any data type
    static <T	> void gPrint (T t){
        System.out.println (t) ;
}
    public static void main (String[] args){
        gPrint (101);		// Calling generic method with Integer argument
        gPrint (3.1412343);	// Calling generic method with double argument
 	gPrint ("Joy with Java"); // Calling generic method with String argument
	}
}

3. A generic method or any method in a generic class can be defined as static
class GenericClass<T>{		// Use < > to specify class type
    T obj;			// An object of type T is declared
    GenericClass (T obj) {	// Constructor of the generic class
    this.obj = obj;
}
public static void print (T obj){
    System.out.println(obj);
    }
}
class GenericStaticDemo2 {
    public static void main (String args[]) {
        GenericClass<Integer> a = new GenericClass<Integer>(new Integer[] {10, 20, 30, 40, 50}) ;	
        GenericClass<String> s = new GenericClass<String>("Joy with Java") ;
        GenericClass<Double> d = new GenericClass<Double>(1.23);

print (a);    // Printing the array a
print (s);    // printing from string
print (d);    //printing the value

4. In parameter type, we can't use primitive type like int, char, double, etc. only class will refered as template data
class GenericClass<T>{		// Use < > to specify class type
    T obj;
    GenericClass (T obj) {
        this.obj = obj;
    }
}

// An object of type T is declared
// Constructor of the generic class

class GenericClassDemo3 {
    public static void main (String args a[]) {
        GenericClass<Integer> a = new GenericClass<Integer>(123);	//okay
        GenericClass<int> a = new GenericClass<int>(234);		//error

        GenericClass<String> s = new GenericClass<String>("Joy with Java") ; // Okay

        GenericClass<double> d = new GenericClass<double>(9.87); // ERROR!
        GenericClass<Double> d = new GenericClass<Double>(1.23); // Okay

	}
}

5. A generic class can be defined with multiple type parameters
class GenericClass<T, V> {		// Use <> matrices to specify class type
	T obj1;				// An object of type T is declared
	V obj2;				// An object of type V is declared

// Constructor of the genetic class
        GenericClass(T obj1, V obj2, ) {
	       this.obj1 = obj1;
	       this.obj2 = obj2;
}


6. If a class A is declared as generic with type parameter <T>, then object of class can be
created any type. This is fine, but it may causes in several situation error during execution.

GenericError<T> {
    T[] array;	    // an array of type T

    // Pass the constructor a reference to an array of type T.
    GenericError (T[] t) {
        array = t;
    }

    double average () { // Return type double in all cases
        double sum = 0.0;
        for(int i=0; i < array.length; i++)
            sum += array[i].doubleValue(); 	// Here is a compiler error!       
        return sum / array.length;
    }
}

7. If a class A is declared as generic with type parameter <T>, then object of class can
be created any type. This is fine !. But, in several situations, it may cause errors
during execution.

. Here, you know that the method doubleValue ( ) is well defined for all numeric
classes, such as Integer, Float and Double, which are the sub classes of Number,
and Number defines the doubleValue ( ) method. Hence, this method is available to
all numeric wrapper classes.

. Further, you note that you can create object of the class GenericError with some type
parameter for which there is no method defined doubleValue (). In other words, the
compiler does not have any knowledge about that you are only interested to create
objects of numeric types. Thus, the program reports compile-time error showing that the
doubleValue ( ) method is unknown.

. To solve this problem, you need some way to tell the compiler that you intend to pass only
numeric types to T. Furthermore, you need some way to ensure that only numeric types
are actually passed.
